import java.util.ArrayList;
import java.util.List;

class Problem43 {
    public boolean isPandigital(String number) {
        if (number.length() != 10 || number.charAt(0) == 0) return false;
        boolean[] digits = new boolean[10];
        for (char c : number.toCharArray()) {
            if (digits[c - '0']) return false;
            digits[c - '0'] = true;
        }
        return true;
    }

    public boolean divisible(String number) {
        int[] divisors = {2, 3, 5, 7, 11, 13, 17};
        for (int i = 0; i < divisors.length; i++) {
            int num = Integer.parseInt(number.substring(i + 1, i + 4));
            if (num % divisors[i] != 0) {
                return false;
            }
        }
        return true;
    }

    public String swap(String a, int i, int j) {
        char temp;
        char[] charArray = a.toCharArray();
        temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }

    public void generatePermutations(List<String> permutations, String str, int n, int index) {
        if (index == n) {
            permutations.add(str);
        } else {
            for (int i = index; i < n; i++) {
                str = swap(str, index, i);
                generatePermutations(permutations, str, n, index + 1);
                str = swap(str, index, i);
            }
        }
    }

    public long solution() {
        List<String> permutations = new ArrayList<>();
        generatePermutations(permutations, "0123456789", 10, 0);

        long sum = 0;
        for (String number : permutations) {
            if (isPandigital(number) && divisible(number)) {
                sum += Long.parseLong(number);
            }
        }
        return sum;
    }
}

public class Main {
    public static void main(String[] args) {
        Problem43 exercise = new Problem43();
        System.out.println(exercise.solution());
    }
}
