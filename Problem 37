class Problem37 {
    public boolean isPrime(int x) {
        if (x <= 1) return false;
        for (int i = 2; i * i <= x; i++) {
            if (x % i == 0) return false;
        }
        return true;
    }

    public boolean truncatableLeftToRight(int x) {
        String numberStr = String.valueOf(x);
        for (int i = 0; i < numberStr.length(); i++) {
            if (!isPrime(Integer.parseInt(numberStr.substring(i)))) {
                return false;
            }
        }
        return true;
    }

    public boolean truncatableRightToLeft(int x) {
        String numberStr = String.valueOf(x);
        while (numberStr.length() > 0) {
            if (!isPrime(Integer.parseInt(numberStr))) {
                return false;
            }
            numberStr = numberStr.substring(0, numberStr.length() - 1);
        }
        return true;
    }

    public int solution() {
        int counter = 0;
        int number = 10;
        int sum = 0;

        while (counter < 11) {
            if (isPrime(number) && truncatableLeftToRight(number) && truncatableRightToLeft(number)) {
                sum += number;
                counter++;
            }
            number++;
        }
        return sum;
    }
}

public class Main {
    public static void main(String[] args) {
        Problem37 exercise = new Problem37();
        System.out.println(exercise.solution());
    }
}
